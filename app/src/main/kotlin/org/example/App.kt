/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.io.File
import java.lang.Thread

class App {
        val greeting: String
                get() {
                        return "Hello World!"
                }
}

fun String.prepareApiInterface(
        packageName: String,
        modelName: String,
        isAuthenticated: Boolean = true
): String {
        var value = this.replace("{{packageName}}", packageName)
        value = value.replace("{{modelName}}", modelName)
        value =
                value.replace(
                        "{{authentication}}",
                        if (isAuthenticated) """Header("Authorization") token: String""" else ""
                )
        return value
}

fun main(args: Array<String>) {
        // create model/repository/retrofitAPI

        val regExpOptions = "(-[rm(?:api)]+)".toRegex()
        val regExpPackageName = "packageName=( ?[a-zA-Z]+)".toRegex()
        val regExpName = "name=( ?[a-zA-Z.]+)".toRegex()



        val arguments = args.joinToString(" ")
        val packageName = regExpPackageName.find(arguments)
        val name = regExpName.find(arguments)
        val options = regExpOptions.findAll(arguments).toList()

        // for unix like os
        // check the options settings up correctly
        if(name == null) {
                throw IllegalArgumentException(
                        "You've to provide a correct name name='TheName'"
                )
        }


        if (options.isEmpty()) {
                throw IllegalArgumentException(
                        "No Options Provided Make Sure you have option -[m(model), r(repository), api(retrofit api interface)]"
                )
        }


        if (packageName == null) {
                throw IllegalArgumentException(
                        "same things went wrong: package name not found"
                )
        }

        val appFullName = "./app/src/java/${packageName.value.replace('.', '/')}"

        if(options.any { it.value.contains("m") }) {
                val file = File("$appFullName/models")
                file.createNewFile()
                val newFile = File(file, name.value + "Model.kt")
                if(newFile.createNewFile()) {
                        print("Model has been created!")
                }
        }

        if(options.any { it.value.contains("r") }) {
                val file = File("$appFullName/repository")
                file.createNewFile()
                val className = File(file, name.value + "Repository.kt")
                val  interfaceName = File(file, name.value + "RepositoryStandards.kt")

                if(className.createNewFile()) {
                        println("Repository has been created!")
                }else {
                        println("Same things went wrong sorry!")
                }

                if(interfaceName.createNewFile()) {
                        print("Repository standards has been created!")
                }
        }

        if(options.any { it.value.contains("api") }) {

        val file_ =
                Thread.currentThread()
                        .contextClassLoader
                        .getResourceAsStream("retrofitapi.tamplate.temp")
                        ?: throw IllegalArgumentException("template not found")

        val content = file_.bufferedReader().use { it.readText() }
        val retrofitContent = content.prepareApiInterface(packageName.value, name.value)
                val file = File("$appFullName/network/api")
                file.createNewFile()
                val interfaceName = File(file, name.value + "Api.kt")

                if(interfaceName.createNewFile()) {
                        print("Repository standards has been created!")
                        interfaceName.outputStream().use { it.write(retrofitContent.toByteArray()) }
                }
        }


//        println(App().greeting)
}
